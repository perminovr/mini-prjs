diff --git a/hal/inc/hal_socket.h b/hal/inc/hal_socket.h
index 316058a..5e7f60d 100644
--- a/hal/inc/hal_socket.h
+++ b/hal/inc/hal_socket.h
@@ -207,6 +207,8 @@ ServerSocket_destroy(ServerSocket self);
  */
 PAL_API Socket
 TcpSocket_create(void);
+PAL_API Socket
+TcpSocket_createAndBind(const char *ip, uint16_t port);
 
 /**
  * \brief set the timeout to establish a new connection
diff --git a/hal/socket/linux/socket_linux.c b/hal/socket/linux/socket_linux.c
index 7d04e4f..0ac05ed 100644
--- a/hal/socket/linux/socket_linux.c
+++ b/hal/socket/linux/socket_linux.c
@@ -35,6 +35,9 @@
 #include <netinet/tcp.h> /* required for TCP keepalive */
 #include <linux/version.h>
 
+// our kernel supports it
+#define TCP_USER_TIMEOUT	18
+
 #define _GNU_SOURCE
 #include <signal.h>
 #include <poll.h>
@@ -399,6 +402,52 @@ TcpSocket_create()
 }
 
 
+Socket
+TcpSocket_createAndBind(const char *ip, uint16_t port)
+{
+    Socket self = NULL;
+    struct sockaddr_in localSock = {0};
+
+    if (!ip)
+        return TcpSocket_create();
+
+    int sock = socket(AF_INET, SOCK_STREAM, 0);
+
+    if (sock != -1) {
+        self = (Socket) GLOBAL_MALLOC(sizeof(struct sSocket));
+
+		localSock.sin_family = AF_INET;
+		localSock.sin_port = htons(port);
+		localSock.sin_addr.s_addr = inet_addr(ip);
+		if (bind(sock, (struct sockaddr*)&localSock, sizeof(struct sockaddr_in)) < 0) {
+            if (DEBUG_SOCKET)
+                printf("SOCKET: failed to bind\n");
+            return 0;
+		}
+
+        self->fd = sock;
+        self->connectTimeout = 5000;
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 37)
+        int tcpUserTimeout = 10000;
+        int result = setsockopt(sock, SOL_TCP,  TCP_USER_TIMEOUT, &tcpUserTimeout, sizeof(tcpUserTimeout));
+
+        if (result < 0) {
+            if (DEBUG_SOCKET)
+                printf("SOCKET: failed to set TCP_USER_TIMEOUT\n");
+        }
+#endif
+
+    }
+    else {
+        if (DEBUG_SOCKET)
+            printf("SOCKET: failed to create socket (errno=%i)\n", errno);
+    }
+
+    return self;
+}
+
+
 void
 Socket_setConnectTimeout(Socket self, uint32_t timeoutInMs)
 {
@@ -427,7 +476,7 @@ Socket_connectAsync(Socket self, const char* address, int port)
     if (connect(self->fd, (struct sockaddr *) &serverAddress, sizeof(serverAddress)) < 0) {
 
         if (errno != EINPROGRESS) {
-            self->fd = -1;
+            // self->fd = -1; // wtf? close???
             return false;
         }
     }
@@ -641,6 +690,18 @@ Socket_write(Socket self, uint8_t* buf, int size)
     /* MSG_NOSIGNAL - prevent send to signal SIGPIPE when peer unexpectedly closed the socket */
     int retVal = send(self->fd, buf, size, MSG_NOSIGNAL);
 
+    if (retVal <= 0) {
+        if (errno == EAGAIN || errno == EWOULDBLOCK) {
+            return 0;
+        }
+        else {
+            if (DEBUG_SOCKET)
+                printf("DEBUG_SOCKET: send returned error (errno=%i)\n", errno);
+            return -1;
+        }
+    }
+
+    #if 0
     if (retVal == -1) {
         if (errno == EAGAIN) {
             return 0;
@@ -650,6 +711,7 @@ Socket_write(Socket self, uint8_t* buf, int size)
                 printf("DEBUG_SOCKET: send returned error (errno=%i)\n", errno);
         }
     }
+    #endif
 
     return retVal;
 }
